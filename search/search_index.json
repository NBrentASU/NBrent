{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Noah Brent's Individual Report","text":"","tags":["tag1","tag2"]},{"location":"#project-definition","title":"Project Definition","text":"<p>The project for Team 310 in EGR 314 is to design a STEM museum exhibit to teach any aspect or principle of STEM to K-12th grade students. Our team decided to demonstrate electromagnetism by accelerating a steel marble along a circular track either forwards or backwards. This will be accompanied by an HMI system to display data and control speeds/timings of the actuator. A sensor system will use a shift register to detect where the ball is and control electromagnetic switchings. A live print out of this data will be tracked and stored on an MQTT internet server and conveyed to the HMI server for display.</p>","tags":["tag1","tag2"]},{"location":"#team-contribution","title":"Team Contribution","text":"<p>For Team 310, my contribution is the actuator subsystem.</p> <p>Some Requirements for this system include:</p> <ul> <li>SPI communication with drivers and microchip</li> <li>Bidirectional control of marble</li> <li>Recieving and sending messages to other systems through UART</li> <li>Attempt to make marble accelerated as fast as possible</li> </ul> <p>Pages will be updated throughout the semester to demonstrate project progress</p> <p>Link to return to Team 310's Website</p>","tags":["tag1","tag2"]},{"location":"Actuator_API/","title":"Actuator API","text":"","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-structure","title":"Message Structure","text":"<p>Start Byte (2 8uint_t)</p> <p>Sender Address (8uint_t)</p> <p>Receiver Address (8uint_t)</p> <p>Message Type (uint8_t)</p> <p>Message (1-56 8uint_t)</p> <p>Stop Byte (2 8uint_t)</p>","tags":["tag1","tag2"]},{"location":"Actuator_API/#team-definitions","title":"Team Definitions","text":"","tags":["tag1","tag2"]},{"location":"Actuator_API/#team-bytes","title":"Team Bytes","text":"Type Byte Start AZ Stop YB","tags":["tag1","tag2"]},{"location":"Actuator_API/#team-addresses","title":"Team Addresses","text":"Name Address Noah Brent N Evan Skinner E Kirk Volin K Hunter Hassebroek H Broadcast X","tags":["tag1","tag2"]},{"location":"Actuator_API/#recieved-messages","title":"Recieved Messages","text":"","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-type-14-master-reset","title":"Message Type 14 (Master Reset)","text":"Byte 1 Message Master Reset Variable Type char Min RST Max RST Example RST","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-type-15-speed-setting-from-hmi","title":"Message Type 15 (Speed Setting from HMI)","text":"Byte 1 Message Speed Setting Variable Type uint8_t Min 1 Max 3 Example 2 (Medium Speed)","tags":["tag1","tag2"]},{"location":"Actuator_API/#sent-messages","title":"Sent Messages","text":"","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-type-8-switchings-per-second","title":"Message Type 8 (Switchings Per Second)","text":"Byte 1 Byte 2 Message # of Switchings Time Since Last Triggered Variable Type uint8_t uint8_t Min 0 0 Max 255 100 Example 12 24 (24 hundreths of a second)","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-type-9-error","title":"Message Type 9 (Error)","text":"Byte 1 Byte 2 Message Error Type Address Received Variable Type uint8_t char Min 0 Z (No error address) Max 5 Address of Error Example 2 E <p>Error Types:</p> <p>0: Incorrect / No Start Bit</p> <p>1: Incorrect / No Address Bit</p> <p>2: Incorrect / No Message Type</p> <p>3: Incorrect / No Stop Bit</p> <p>4: Incorrect Data Value in Valid Message</p> <p>5: Bytes per Message Overflow</p>","tags":["tag1","tag2"]},{"location":"Actuator_API/#message-type-10-reset","title":"Message Type 10 (Reset)","text":"Byte 1 Message Reset of Actuator System Variable Type uint8_t Min 0 Max 1 Example 1 (Reset)","tags":["tag1","tag2"]},{"location":"Actuator_API/#code-handling","title":"Code Handling","text":"<p>Priority is placed on retransmitting incoming data before transmitting personal data as the outgoing Actuator data is not time sensitive(other than errors).</p> <p>When Actuator Subsystem receives a message, the following is the protocol for handling:</p> <ol> <li>Identify start and begin copying it to array for retransmission</li> <li>When Receiver Byte is identified, check if mine or broadcast     2a. If not mine, finish copying to retransmission array then retransmit     2b. If mine, continue to step 3     2c. If broadcast byte, copy to retransmit array, retransmit, and continue to step 3</li> <li>Identify Message Type</li> <li>Utilize message information</li> <li>Trash Message</li> <li>Transmit relevant data</li> <li>Continue from step one when receiving a new message</li> </ol> <p>For each step, there will be an error check to confirm the message is valid. Should it fail, the error code and address it was sent from will be transmitted.</p> <p>Should characters be sent outside of start or stop bits, they are ignored and trashed.</p> <p>To elaborate on step 6 and error handling</p> <ol> <li>Whenever an interruptive event occurs (ie switching info every second, error, or reset) begin contruction of message in array</li> <li>To a temporary array, begin by adding start bytes and my address byte</li> <li>Then add receiving address which in most cases will be MQTT, HMI, or broadcast</li> <li>Add message type byte based on messaging protocols above</li> <li>Complete message by adding data then capping with stop bytes</li> <li>Check if already transmitting, if so wait for transmission to end and delay then send</li> <li>Otherwise send</li> <li>Trash temporary sending array</li> </ol> <p>A group sending schedule may be implemented to improve message success rates and ensure minimal message loss.</p>","tags":["tag1","tag2"]},{"location":"Actuator_BOM/","title":"Actuator Bill Of Materials","text":"","tags":["tag1","tag2"]},{"location":"Actuator_BOM/#bill-of-materials","title":"Bill of Materials","text":"<p>Link to Actuator BOM</p> <p>Above is the complete list of components required to build the Actuator system. The unit cost of each item is the price per 1 of that component whereas the production cost is based on the 100 unit pricing. The reason for this is that this is a science museum exhibit rather than a mass produced item needing thousands of each component. The only items unaccounted for price-wise are those given by the Peralta Lab at ASU according to instructor directions. Overall, this actuation system costs $60.17 per unit coming in just over the 60 dollar maximum per individual.</p>","tags":["tag1","tag2"]},{"location":"Actuator_Block_Diagram/","title":"Individual Block Diagram","text":"","tags":["tag1","tag2"]},{"location":"Actuator_Block_Diagram/#subsystem-actuator","title":"Subsystem: Actuator","text":"<p>Link to Actuator Block Diagram</p> <p>Above is the Actuation Subsystem for Team 310 created by Noah Brent. This achieves actuation via data sent from the sensor subsystem which turns on or off the electromagnets. Depending on the data recieved, an SPI motor driver chip will send current into the electromagnet to pull and push the steel ball by switching the current and changing the magnetic field. Data regarding these switchings and timings will then be sent to the MQTT and HMI subsystems for recording and displaying respectively.</p>","tags":["tag1","tag2"]},{"location":"Actuator_Component_Selection/","title":"Individual Component Selection","text":""},{"location":"Actuator_Component_Selection/#component-selection-actuator-subsystem","title":"Component Selection - Actuator Subsystem","text":""},{"location":"Actuator_Component_Selection/#microcontroller","title":"Microcontroller","text":""},{"location":"Actuator_Component_Selection/#microcontrollers","title":"Microcontrollers","text":"Components Pros Cons PIC18F47Q10 (TQFP/44) Pins distributed on 4 sides (more room for traces) / Extra pins should something come up / Same as class DIP 44 pins (excess of needed) / Difficulty soldering / Extremely small and dense configuration at 10x10x1mm PIC18F27Q10 (SOIC/28) 7.5x17.9mm / Most pins will be used, minimizing excess soldering / Easier soldering / 128K Bytes (Flash) / 1k EEPROM More pins per side / If a requirement is overlooked now, little to no extra pins to fix it / 31 Deep Hardware Stack / 3.6K SRAM / Confusing documentation regarding pins PIC18F24Q24 (SOIC/28) 7.5x17.9mm / Most pins will be used, minimizing excess soldering / Easier soldering / 128 Deep Hardware Stack / 4K SRAM / Better information for my use case More pins per side / If a requirement is overlooked now, little to no extra pins to fix it / 64K Bytes (Flash) / 500 EEPROM"},{"location":"Actuator_Component_Selection/#selection","title":"Selection","text":"<p>Despite having some downsides memory-wise when compared to the PIC18F27Q10 (SOIC/28), the PIC18F24Q24 (SOIC/28) had the datasheet that best-described functionality regarding our use case which is why the component was selected.</p>"},{"location":"Actuator_Component_Selection/#selected-pic-info","title":"Selected PIC Info","text":"PIC18F24Q24 Info Answer Product Page PIC18F24Q24 (SOIC/28) Datasheet Datasheet Application Notes Application Notes Vendor Microchip Examples Examples External Resources External Resources Unit Cost $0.95 Max IC Current 250 mA Max GPIO Current 20 mA Interrupt Support Yes Requirements Requirements (On Datasheet) MPLabX Support Yes MCC Support Yes"},{"location":"Actuator_Component_Selection/#necessary-pins","title":"Necessary Pins","text":"Module # Available Needed Associated Pins UART 2 2 GPIO43 ~ GPIO44, GPIO17 ~ GPIO18 External SPI 2 1 SDI, SDO, SCK I2C 2 0 SDA, SDL GPIO 2 2 * ADC 19 0 ADC PWM 3 0 * ICSP 3 3 DAT, SCK, MCLR"},{"location":"Actuator_Component_Selection/#mplabx-no-error-mcc-melody-support","title":"MPLabX (No Error &amp; MCC / Melody Support)","text":"<p>PIC loaded in MCC with no errors.</p>"},{"location":"Actuator_Component_Selection/#on-board-switching-voltage-regulator","title":"On-Board Switching Voltage Regulator","text":"Components Pros Cons REG102UA-3.3 Cost-effective / Simple wiring, fixed output Limiting input voltage at 10V / Outputs only 250 mA / Has lead times, bulk quantity only / 0.15x0.19in, small but only 8 pins LM2674MX-3.3/NOPB 500 mA output / Fixed voltage output of 3.3V / 5x3.9mm, slightly larger than other option with same pins / 6.5-40V input / Essentially same as in class regulator If the voltage to the board ever needed to change (unlikely), this is not adjustable TLV61048DBVR Cheapest option at $0.63 / 3.7A output / 3-14V adjustable output / Only 6 pins Only 2.65-5.5V input / 1.75x1.9mm / extremely small"},{"location":"Actuator_Component_Selection/#selection_1","title":"Selection","text":"<p>Due to the voltage more than likely not needing to change from 3.3V, the best option would be the LM267 as it provides enough amperage at 3.3V to power my board. Its size is a bit small but only 6 of the pins need soldering and it will be achievable. The flexibility of the input voltage allows the power to change if needed and still be able to handle regulating the board power.</p>"},{"location":"Actuator_Component_Selection/#electromagnet-switching-voltage-regulator","title":"Electromagnet Switching Voltage Regulator","text":"Components Pros Cons TPS562201DDCR Adjustable switching / 2A current / Similar to class regulator / Wide input range, 4.5-17V / Low cost of $0.35 Max voltage is 7V which is lower than would be comfortable with / 3x1.75mm, pretty small LM2594M-12 5x4mm, good size / 3A output, more than required / Wide output voltage Costly at $3.72 per chip LM2594M-ADJ Decently priced for performance at $2.68 per chip / 1.5A, exactly what is needed / Wide input voltage of 4.5-40V / Wide output voltages of 1.23-37V Extra framework needed to set voltage"},{"location":"Actuator_Component_Selection/#selection_2","title":"Selection","text":"<p>The LM2594M is the best option for my electromagnet\u2019s power needs. The wide range of voltage adjustability on the inputs and outputs allows for it to be tweaked as needed to use the full power of the designed magnet. The extra room for experimentation will allow for the best outcome possible.</p>"},{"location":"Actuator_Component_Selection/#electromagnets","title":"Electromagnets","text":"Components Pros Cons 5V Electromagnet - 5 Kg Holding Force Premade, comes with documented voltages and amperages / Simple design, compact Would either need a hole drilled through or be fixtured above / Non-flexible (no \u201creal\u201d adjustment if too weak or strong) / $10 per magnet / 5 kg holding force Adafruit Industries 3875 Magnets 25kg holding force (not same as pulling force) / Premade, comes with documented voltages and amperages $23 per magnet / Would either need a hole drilled through or be fixtured above / Non-flexible (no \u201creal\u201d adjustment if too weak or strong) Homemade Electromagnet: Hand wound with 30 AWG magnet wire around a hollow core (most likely 3D printed) Adjustable to specific needs or issues / Around 10 bucks for a quarter pound of material / Can be remade if something happens Excess calculations and research needed / Making CAD files for hollow core / Potential heating issues"},{"location":"Actuator_Component_Selection/#selection_3","title":"Selection","text":"<p>The homemade magnet will be best for the actuator subsystem due to its use case. During component research, anything high power was out of budget and did not have a \u201cthrough hole\u201d for a marble to accelerate through. Buying and assembling the magnets from scratch allows for a high level of control over input voltage and amperage to adjust the Gauss strength.</p>"},{"location":"Actuator_Component_Selection/#magnet-driver-component","title":"Magnet Driver Component","text":"Components Pros Cons DRV8830 Runs off of 3.3V like the rest of the system / $2.09 per chip Max output of 6.8V at 1 A (May not be enough) / Only can drive one coil (would need 2) / 3x3mm, small for soldering DRV10983QPWPRQ1 Max Output of 28V at 2A / 7.8x6.4mm, decent size but is 24 pins / Built-in buck converter / Built-in over-current protection Would require a voltage regulator of 6.2V+ / $4.09 per chip / Fairly overbuilt for what is needed / For 3 phase motor (it seems) NCV7703CD2R2G 8.55x5.8mm, good size for 14 pins / 1 A output per pin at 5.5-40V / Takes same voltage as the rest of the board Has 3 Outputs, can be solved with a logic gate"},{"location":"Actuator_Component_Selection/#selection_4","title":"Selection","text":"<p>The NCV chip is the best overall option due to its SPI support, the wide output range of voltages and amperages, wide pin spacings, and taking the same 3.3V as the microcontroller (as logic power only). There are two downsides however, the first of which is the 16-bit serial buses of this driver communicating with the 8-bit microcontroller. This will take extra coding but should work due to my microcontroller having selectable frequencies up to 64 MHZ and the driver having 5 MHZ. This means that the microcontroller can send 2 8-bit strings to the driver so that it will register as a single 16-bit string and the driver\u2019s sending a 16-bit string being able to be broken and stored into 2 8-bit strings for interpretation on chip. The second of which is this chip has 3 outputs instead of an even 4 to handle both magnets. This is easily solvable by either using 2 of these chips or integrating a logic circuit to switch between magnets.</p>"},{"location":"Actuator_Component_Selection/#power-input","title":"Power Input","text":"Components Pros Cons PJ-102AH 5A rated / Simple 3 prong / $0.76 per jack / 24 VDC Not technically surface mount, can be altered to be PJ-002B 2.5A rated / Simple 3 prong / $0.49 per jack / 24 VDC Not technically surface mount, can be altered to be 54-00127 6A rated / 48 V Input / $0.61 per jack / Simple 3 prong / Non-standard casing, either pro or con Not technically surface mount, can be altered to be"},{"location":"Actuator_Component_Selection/#selection_5","title":"Selection","text":"<p>Most barrel jacks at this level come down to personal preference as my maximum expected load is lower than most of the barrel\u2019s minimum ratings. Given this the PJ-102AH will be used. Even though it is slightly more expensive it gives a bit more headway at 5A rather than 2.5A while looking standard.</p>"},{"location":"Actuator_Component_Selection/#non-critical-debugging-components","title":"Non-Critical, Debugging Components","text":""},{"location":"Actuator_Component_Selection/#button","title":"Button","text":"Components Purpose Button Simple, non-descript button for sending 3.3V to GPIO pin for debugging and/or proving UART connection between boards over a daisy chain"},{"location":"Actuator_Component_Selection/#led","title":"LED","text":"Components Purpose LED Simple 2-legged LED (will alter for surface mounting) to show debugging status, prove UART connection between boards over daisy chain, and potentially the electromagnet switching status."},{"location":"Actuator_PCB/","title":"Actuator PCB Design","text":"","tags":["tag1","tag2"]},{"location":"Actuator_PCB/#actuator-pcb-design","title":"Actuator PCB Design","text":"<p>Above is the actuator PCB design</p>","tags":["tag1","tag2"]},{"location":"Actuator_Power_Budget/","title":"Actuator Power Budget","text":"<p>Below is all of the components within my system that will draw current.</p> <p></p> <p>Below is the total current requirements for the components on the 3.3V and 9V rails with a safety margin of 25%.</p> <p></p> <p>This 9V rail may change based on testing of the electromagnet which is possible due to the regulator being adjustable</p> <p>Electromagnets will only be able to be activated one at a time therefore only the current draw of one is listed</p> <p>Below are the regulator maximums in comparison to the barrel jack supply we will use.</p> <p></p> <p>Link to Actuator Power Budget</p>","tags":["tag1","tag2"]},{"location":"Actuator_Schematic/","title":"Actuator Schematic","text":"","tags":["tag1","tag2"]},{"location":"Actuator_Schematic/#schematic","title":"Schematic","text":"<p>Link to Actuator Schematic PDF</p> <p>Link to Actuator Schematic Altium File</p> <p>Above is the schematic of the actuator subsystem in Altium. The PIC microcontroller is a custom-made symbol due to importing issues, all other components come from Digikey or the built-in manufacturer part search. Altium was chosen as the platform due to its online-sharing capabilities as well as the built-in library. </p> <p>There are 4 main sections of the subsystem to accomplish its functions.</p> <p>The power regulators and power inputs are located in the top left. This section allows for power inputs via the daisy chain set up or on-board power jack. The upper regulator is for any 3.3V requirements such as logic power, microcontroller, LEDs, etc. The lower regulator is exclusively to power the electromagnets, starting with 9V and 1.5A. This is an adjustable regulator as to be able to fine-tune the required voltage and amperage to effectively pull the steel marble. These voltages are then routed to their VDD and VS paths respectively.</p> <p>The connectors section contains the programming and daisy chain connections. The Snap programmer provided by the professors requires 5 pins (MCLR, VDD, GND, DAT, CLK) in order to properly interface with the provided PIC. Using a set of 5 headers allows for easy programming through paths to their respective ICSP pins. The 2x4 molex connector is the daisy chain which facilitates board-to-board communication and eventual power transfer. Pins 1-5 and 8 will be used to send and recieve information to control and document the electromagnetic switchings.</p> <p>The microcontroller section contains all of the necessary hardware to operate, debug, and program the PIC microcontroller. This includes the MCLR programming circuit, ICSP programming pins, debugging LEDS, pushbutton for testing, UART messaging pins, and SPI interfacing with electromagnets.</p> <p>The electromagnet section contains 2 electromagnets with bi-directional EMF flyback diodes, each with an SPI driver communicating with the PIC. This system allows a reduced SPI pin requirement as each chip can be activated from their CSB pin. From there, serial data will be sent to determine current flow which will affect the direction of the magnetic flow to push or pull the marble. These SPI drivers are 16 bit whereas the PIC is only 8-bit. However, the PIC has an operational range of 64 MHz where the chips operate at 5 MHz meaning 2 8-bit messages can be sent at 10 MHz to mimic a 5 MHz 16-bit signal.</p>","tags":["tag1","tag2"]},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}